import os
import re
import time
import shlex
import socket
import subprocess
import xmlrpc.server
import enum

class StatusCode(enum.Enum):
    PATCHED = 101
    VULNERABLE = 102
    DOWN = 103
    ERROR = 110

    def __bool__(self):
        return self.value == self.PATCHED or self.value == self.ERROR

    def __int__(self):
        return self.value


def exploit(host: str, flagid: str, timeout: int = 60) -> str:
    start = time.time()
    result = ''
    debug = ''
    exitcode = StatusCode.ERROR
    try:
        print(f"Running python3 exploit.py {host} {flagid}")
        result = subprocess.check_output(f"python3 exploit.py {host} {flagid}", shell=True, timeout=timeout, stderr=subprocess.STDOUT)
        print("Result: " + str(result))
        if re.compile(FLAG_FORMAT).search(result):
            exitcode = StatusCode.VULNERABLE
        else:
            exitcode = StatusCode.PATCHED
    except subprocess.CalledProcessError as e:
        result = e.stdout
        print("Result: " + str(result))
        exitcode = e.returncode
    except subprocess.TimeoutExpired as e:
        result = e.stdout
        exitcode = StatusCode.DOWN
    except Exception as e:
        exitcode = StatusCode.ERROR
    status = {'action': 'exploit', 'host': host, 'code': int(exitcode), 'comment': '', 'latency': int((time.time() - start) * 1000), 'private': '', 'debug': result}
    print('[EXPLOIT] Status: ' + str(status), flush=True)
    return status

# Set up routing correctly
if os.environ.get('GATEWAY'):
    os.system('ip route delete default')
    os.system('ip route add default via ' + os.environ.get('GATEWAY'))

TICK_SECONDS = int(os.environ.get('TICK_SECONDS'))
FLAG_FORMAT = os.environ.get('FLAG_FORMAT')

socket.setdefaulttimeout(TICK_SECONDS)
server = xmlrpc.server.SimpleXMLRPCServer(('0.0.0.0', 5000), allow_none=True, logRequests=False)
server.register_function(exploit, 'exploit')
server.serve_forever()
